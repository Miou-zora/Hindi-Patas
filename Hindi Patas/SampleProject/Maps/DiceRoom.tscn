[gd_scene load_steps=10 format=3 uid="uid://cjk52vjugqh5"]

[ext_resource type="TileSet" uid="uid://bwpcg2opya34n" path="res://SampleProject/Resources/Tileset.tres" id="1_l63o1"]
[ext_resource type="PackedScene" uid="uid://bsg0351mx3b4u" path="res://addons/MetroidvaniaSystem/Nodes/RoomInstance.tscn" id="2_b0ayl"]
[ext_resource type="PackedScene" uid="uid://ke056546dq4j" path="res://SampleProject/Objects/Dice.glb" id="3_a62rx"]
[ext_resource type="PackedScene" uid="uid://cwrf84g5mlucd" path="res://SampleProject/Objects/Portal.tscn" id="5_m5jcc"]

[sub_resource type="GDScript" id="GDScript_2fold"]
resource_name = "Dice"
script/source = "extends Area2D

# The path where generated scenes are placed.
const GENERATED_MAPS_PATH = \"user://Generated\"
# Helper for translating direction constants to vectors.
const FWD = { MetroidvaniaSystem.R: Vector2i.RIGHT, MetroidvaniaSystem.D: Vector2i.DOWN, MetroidvaniaSystem.L: Vector2i.LEFT, MetroidvaniaSystem.U: Vector2i.UP }
# Generation thread.
var generating: Thread
# 
var new_generated_maps: Array[String]

func _ready() -> void:
	# Ensure the map dir exists.
	DirAccess.make_dir_absolute(GENERATED_MAPS_PATH)
	# Close off the exit if no rooms were generated.
	if not Game.get_singleton().generated_rooms.is_empty():
		%TileMap.set_layer_enabled(2, false)
	
	set_process(false)

# Player touched the dice. Generation starts here.
func _on_body_entered(body: Node2D) -> void:
	# Ignore when already generating.
	if generating:
		return
	# Close the exit.
	%TileMap.set_layer_enabled(2, true)
	
	# Destroy all generated rooms.
	for coords in Game.get_singleton().generated_rooms:
		MetSys.get_cell_override(coords, false).destroy()
		MetSys.save_data.discovered_cells.erase(coords)
	Game.get_singleton().generated_rooms.clear()
	
	# Delete generated scenes.
	for file in DirAccess.get_files_at(GENERATED_MAPS_PATH):
		DirAccess.remove_absolute(GENERATED_MAPS_PATH.path_join(file))
	
	# Start the dice animation.
	%DiceAnimator.play(&\"Spin\")
	var tween := create_tween()
	tween.tween_property(%DiceAnimator, ^\"speed_scale\", 4.0, 4.0)
	tween.tween_interval(randf_range(1.0, 2.0))
	tween.tween_property(%DiceAnimator, ^\"speed_scale\", 0.0, 2.0)
	
	# The thread that does map generation.
	generating = Thread.new()
	generating.start(generate_map)
	set_process(true)
	
	await tween.finished
	# Open the exit after the dice animation has finished. The rooms have most likely been generated by now.
	%TileMap.set_layer_enabled(2, false)

# The thread method for generating maps. The algorithm is simple: pick random cell and direction and make an adjacent cell if it doesn't exist.
func generate_map():
	# Gets rid of errors. This method is thread-safe, trust me.
	Thread.set_thread_safety_checks_enabled(false)
	# The grid of generated cells. The key is cell coordinates relative to the first generated cell, the value is a bitmask of exits.
	var grid: Dictionary#[Vector2i, int]
	# Distance map. The key is cell coordinate, the value is distance from the first cell.
	var distance_grid: Dictionary#[Vector2i, int]
	# Initialize the first cell. This is the cell next to the Dice Room.
	# 4 = 1 << MetroidvaniaSystem.L (the way to the Dice Room).
	grid[Vector2i()] = 4
	distance_grid[Vector2i()] = 0
	
	# Create up to 10 cells. This method does not make actual cells yet, only logical ones for now.
	while grid.size() < 10:
		# Pick a random existing cell.
		var pos: Vector2i = grid.keys().pick_random()
		# Pick a random direction to go.
		var go = randi() % 4
		# The next cell as determined by the picked cell and direction.
		var next: Vector2i = pos + FWD[go]
		# Can't go further to the left than the starting point.
		if next.x < 0:
			continue
		# Ignore already existing cells.
		if next in grid:
			continue
		# If this way already exists, abort.
		if grid[pos] & 1 << go:
			continue
		
		# Assign exit to the picked cell.
		grid[pos] |= 1 << go
		# Assign opposite exit to the next cell.
		grid[next] = 1 << ((go + 2) % 4)
		# Assign distance.
		distance_grid[next] = distance_grid[pos] + 1
	
	# Get the cell data of the dice room (using unexposed stuff).
	var dice_cell_data := MetSys.map_data.get_cell_at(Vector3i(-1, -7, 2))
	# Create MapBuilder.
	var builder := MetSys.get_map_builder()
	
	# Pick the cell with the greatest distance. This is where the orb will go.
	var collectible_pos: Vector2i = distance_grid.keys().reduce(func(accum: Vector2i, pos: Vector2i):
		if distance_grid[pos] > distance_grid[accum]:
			return pos
		else:
			return accum
		, Vector2i())
	
	# Clear the old generated maps array.
	new_generated_maps.clear()
	
	# Go over every virtual cell.
	for pos in grid:
		# The coordinates are the starting room coordinates + the cell's offset.
		var coords := Vector3i(0 + pos.x, -7 + pos.y, 2)
		# Append the coordinates to generated rooms stored in Game (to keep track of what was generated).
		Game.get_singleton().generated_rooms.append(coords)
		
		# Create the cell.
		var cell := builder.create_cell(coords)
		# Assign the same color as the dice room (this is why we needed the data).
		cell.color = dice_cell_data.color
		# Go over all cell bordersof the cell and assign wall or passage based on the bitmask.
		for i in 4:
			cell.borders[i] = 1 if grid[pos] & 1 << i else 0
			# Also copy the color.
			cell.border_colors[i] = dice_cell_data.border_colors[i]
		
		# Assign the scene (generate_cell() will create a new scene and return its path).
		cell.set_assigned_scene(generate_scene(\"Junction.tscn\", grid[pos], pos == collectible_pos))
	
	# Update the map after the generation has finished.
	builder.update_map()

# This method generates the scene path.
func generate_scene(from_map: String, exits: int, place_collectible: bool) -> String:
	# Select the base scene. It's always the same one (though you can easily add more).
	var scene: PackedScene = load(\"res://SampleProject/Maps/%s\" % from_map)
	
	from_map = from_map.get_basename()
	var new_map: String
	var files: Array[String]
	
	# If this is the first generated scene, the name is SceneName1.
	if new_generated_maps.is_empty():
		new_map = from_map + \"1.tscn\"
	else:
		# Otherwise increment the last scene.
		new_map = \"%s%d.tscn\" % [from_map, new_generated_maps.back().to_int() + 1]
	
	# Append the new map name to the generated maps.
	new_generated_maps.append(new_map)
	# Get full path to the scene.
	new_map = GENERATED_MAPS_PATH.path_join(new_map)
	# Prepare the actual scene. This can't be done in thread, so the call is deferred.
	prepare_scene.call_deferred(scene, exits, place_collectible, new_map)
	# Return the new map path.
	return new_map

# This method \"generates\" the actual scene content.
# This part is very project-specific and bare-bones in this case. We are using only a single pre-defined scene and do basic configuration.
func prepare_scene(from_scene: PackedScene, exits: int, place_collectible: bool, target_name: String):
	# Instantiate the base scene.
	var map: Node2D = from_scene.instantiate()
	# Get the config node and assign exits (see Junction.tscn for more details).
	var config := map.get_node(^\"Config\")
	config.exits = exits
	
	# If the current scene is not supposed to have the collectibe, free it.
	if not place_collectible:
		map.get_node(^\"Collectible\").free()
	
	# Pack the scene again and save it under the previously determined path.
	var ps := PackedScene.new()
	ps.pack(map)
	ResourceSaver.save(ps, target_name)

func _process(delta: float) -> void:
	# Join thread when it has finished.
	if not generating.is_alive():
		generating.wait_to_finish()
		generating = null
		set_process(false)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_kd5wt"]
size = Vector2(48, 48)

[sub_resource type="Animation" id="Animation_g16o2"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0, 0)]
}

[sub_resource type="Animation" id="Animation_7j2ql"]
resource_name = "Spin"
length = 3.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.5, 1, 1.5, 2, 2.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 0,
"values": [Vector3(0, 1.5708, 0), Vector3(0, 0, 1.5708), Vector3(1.5708, 0, 0), Vector3(0, -1.5708, 0), Vector3(0, 0, -1.5708), Vector3(-1.5708, 0, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_txane"]
_data = {
"RESET": SubResource("Animation_g16o2"),
"Spin": SubResource("Animation_7j2ql")
}

[node name="Map" type="Node2D"]

[node name="TileMap" type="TileMap" parent="."]
unique_name_in_owner = true
tile_set = ExtResource("1_l63o1")
format = 2
layer_0/name = "Foreground"
layer_0/tile_data = PackedInt32Array(262144, 524291, 7, 327680, 524291, 7, 393216, 524291, 7, 458752, 524291, 7, 524288, 524291, 7, 786432, 524291, 7, 851968, 524291, 7, 917504, 524291, 7, 262145, 524291, 7, 327681, 524291, 7, 393217, 524291, 7, 458753, 524291, 7, 524289, 524291, 7, 786433, 524291, 7, 851969, 524291, 7, 917505, 524291, 7, 262146, 589827, 7, 327682, 589827, 7, 393218, 589827, 7, 458754, 589827, 7, 524290, 589827, 7, 786434, 589827, 11, 851970, 524291, 7, 917506, 524291, 7, 786435, 524291, 6, 851971, 524291, 7, 917507, 524291, 7, 786436, 524291, 6, 851972, 524291, 7, 917508, 524291, 7, 786437, 524291, 6, 851973, 524291, 7, 917509, 524291, 7, 786438, 524291, 6, 851974, 524291, 7, 917510, 524291, 7, 786439, 524291, 6, 851975, 524291, 7, 917511, 524291, 7, 786440, 524291, 6, 851976, 524291, 7, 917512, 524291, 7, 786441, 524291, 6, 851977, 524291, 7, 917513, 524291, 7, 786442, 524291, 6, 851978, 524291, 7, 917514, 524291, 7, 786443, 524291, 6, 851979, 524291, 7, 917515, 524291, 7, 786444, 524291, 6, 851980, 524291, 7, 917516, 524291, 7, 786445, 524291, 6, 851981, 524291, 7, 917517, 524291, 7, 786446, 524291, 6, 851982, 524291, 7, 917518, 524291, 7, 786447, 524291, 6, 851983, 524291, 7, 917519, 524291, 7, 786448, 524291, 6, 851984, 524291, 7, 917520, 524291, 7, 786449, 524291, 6, 851985, 524291, 7, 917521, 524291, 7, 786450, 524291, 6, 851986, 524291, 7, 917522, 524291, 7, 786451, 524291, 6, 851987, 524291, 7, 917523, 524291, 7, 786452, 524291, 6, 851988, 524291, 7, 917524, 524291, 7, 786453, 524291, 6, 851989, 524291, 7, 917525, 524291, 7, 786454, 524291, 6, 851990, 524291, 7, 917526, 524291, 7, 786455, 524291, 6, 851991, 524291, 7, 917527, 524291, 7, 786456, 524291, 6, 851992, 524291, 7, 917528, 524291, 7, 786457, 524291, 6, 851993, 524291, 7, 917529, 524291, 7, 786458, 524291, 6, 851994, 524291, 7, 917530, 524291, 7, 327704, 458755, 7, 393240, 458755, 7, 458776, 458755, 7, 524312, 458755, 8, 327705, 524291, 7, 393241, 524291, 7, 458777, 524291, 7, 524313, 524291, 8, 327706, 524291, 7, 393242, 524291, 7, 458778, 524291, 7, 524314, 524291, 8, 196632, 655363, 10, 196610, 589827, 10, 196611, 524291, 8, 196612, 524291, 8, 196613, 524291, 8, 196614, 524291, 8, 196615, 524291, 8, 196616, 524291, 8, 196617, 524291, 8, 196618, 524291, 8, 196619, 524291, 8, 196620, 524291, 8, 196621, 524291, 8, 196622, 524291, 8, 196623, 524291, 8, 196624, 524291, 8, 196625, 524291, 8, 196626, 524291, 8, 196627, 524291, 8, 196628, 524291, 8, 196629, 524291, 8, 196630, 524291, 8, 196631, 524291, 8, 262168, 458755, 7, 3, 524291, 7, 131073, 524291, 7, 65537, 524291, 7, 1, 524291, 7, 0, 524291, 7, 65536, 524291, 7, 131072, 524291, 7, 196608, 524291, 7, 196609, 524291, 7, 2, 524291, 7, 65538, 524291, 7, 131074, 524291, 7, 131075, 524291, 7, 65539, 524291, 7, 65540, 524291, 7, 4, 524291, 7, 5, 524291, 7, 65541, 524291, 7, 131077, 524291, 7, 131076, 524291, 7, 131078, 524291, 7, 65542, 524291, 7, 6, 524291, 7, 7, 524291, 7, 65543, 524291, 7, 131079, 524291, 7, 131080, 524291, 7, 65544, 524291, 7, 8, 524291, 7, 9, 524291, 7, 65545, 524291, 7, 131081, 524291, 7, 131082, 524291, 7, 65546, 524291, 7, 10, 524291, 7, 11, 524291, 7, 65547, 524291, 7, 131083, 524291, 7, 131084, 524291, 7, 65548, 524291, 7, 12, 524291, 7, 13, 524291, 7, 65549, 524291, 7, 131085, 524291, 7, 131086, 524291, 7, 65550, 524291, 7, 14, 524291, 7, 15, 524291, 7, 65551, 524291, 7, 131087, 524291, 7, 131088, 524291, 7, 65552, 524291, 7, 16, 524291, 7, 17, 524291, 7, 65553, 524291, 7, 131089, 524291, 7, 131090, 524291, 7, 65554, 524291, 7, 18, 524291, 7, 19, 524291, 7, 65555, 524291, 7, 131091, 524291, 7, 131092, 524291, 7, 65556, 524291, 7, 20, 524291, 7, 21, 524291, 7, 65557, 524291, 7, 131093, 524291, 7, 131094, 524291, 7, 65558, 524291, 7, 22, 524291, 7, 23, 524291, 7, 65559, 524291, 7, 131095, 524291, 7, 131096, 524291, 7, 65560, 524291, 7, 24, 524291, 7, 25, 524291, 7, 65561, 524291, 7, 131097, 524291, 7, 196633, 524291, 7, 262169, 524291, 7, 262170, 524291, 7, 196634, 524291, 7, 131098, 524291, 7, 65562, 524291, 7, 26, 524291, 7, 589824, 524291, 7, 589825, 524291, 7, 589826, 589827, 7, 655360, 524291, 7, 655361, 524291, 7, 655362, 589827, 7, 720896, 524291, 7, 720897, 524291, 7, 720898, 589827, 7)
layer_1/name = "Background"
layer_1/z_index = -1
layer_1/tile_data = PackedInt32Array(262147, 524291, 1, 327683, 524291, 1, 393219, 524291, 1, 458755, 524291, 1, 524291, 524291, 1, 589827, 524291, 1, 655363, 524291, 1, 262148, 524291, 1, 327684, 524291, 1, 393220, 524291, 1, 458756, 524291, 1, 524292, 524291, 1, 589828, 524291, 1, 655364, 524291, 1, 262149, 524291, 1, 327685, 524291, 1, 393221, 524291, 1, 458757, 524291, 1, 524293, 524291, 1, 589829, 524291, 1, 655365, 524291, 1, 262150, 524291, 1, 327686, 524291, 1, 393222, 524291, 1, 458758, 524291, 1, 524294, 524291, 1, 589830, 524291, 1, 655366, 524291, 1, 262151, 524291, 1, 327687, 524291, 1, 393223, 524291, 1, 458759, 524291, 1, 524295, 524291, 1, 589831, 524291, 1, 655367, 524291, 1, 262152, 524291, 1, 327688, 524291, 1, 393224, 524291, 1, 458760, 524291, 1, 524296, 524291, 1, 589832, 524291, 1, 655368, 524291, 1, 262153, 524291, 1, 327689, 524291, 1, 393225, 524291, 1, 458761, 524291, 1, 524297, 524291, 1, 589833, 524291, 1, 655369, 524291, 1, 262154, 524291, 1, 327690, 524291, 1, 393226, 524291, 1, 458762, 524291, 1, 524298, 524291, 1, 589834, 524291, 1, 655370, 524291, 1, 262155, 524291, 1, 327691, 524291, 1, 393227, 524291, 1, 458763, 524291, 1, 524299, 524291, 1, 589835, 524291, 1, 655371, 524291, 1, 262156, 524291, 1, 327692, 524291, 1, 393228, 524291, 1, 458764, 524291, 1, 524300, 524291, 1, 589836, 524291, 1, 655372, 524291, 1, 262157, 524291, 1, 327693, 524291, 1, 393229, 524291, 1, 458765, 524291, 1, 524301, 524291, 1, 589837, 524291, 1, 655373, 524291, 1, 262158, 524291, 1, 327694, 524291, 1, 393230, 524291, 1, 458766, 524291, 1, 524302, 524291, 1, 589838, 524291, 1, 655374, 524291, 1, 262159, 524291, 1, 327695, 524291, 1, 393231, 524291, 1, 458767, 524291, 1, 524303, 524291, 1, 589839, 524291, 1, 655375, 524291, 1, 262160, 524291, 1, 327696, 524291, 1, 393232, 524291, 1, 458768, 524291, 1, 524304, 524291, 1, 589840, 524291, 1, 655376, 524291, 1, 262161, 524291, 1, 327697, 524291, 1, 393233, 524291, 1, 458769, 524291, 1, 524305, 524291, 1, 589841, 524291, 1, 655377, 524291, 1, 262162, 524291, 1, 327698, 524291, 1, 393234, 524291, 1, 458770, 524291, 1, 524306, 524291, 1, 589842, 524291, 1, 655378, 524291, 1, 262163, 524291, 1, 327699, 524291, 1, 393235, 524291, 1, 458771, 524291, 1, 524307, 524291, 1, 589843, 524291, 1, 655379, 524291, 1, 262164, 524291, 1, 327700, 524291, 1, 393236, 524291, 1, 458772, 524291, 1, 524308, 524291, 1, 589844, 524291, 1, 655380, 524291, 1, 262165, 524291, 1, 327701, 524291, 1, 393237, 524291, 1, 458773, 524291, 1, 524309, 524291, 1, 589845, 524291, 1, 655381, 524291, 1, 262166, 524291, 1, 327702, 524291, 1, 393238, 524291, 1, 458774, 524291, 1, 524310, 524291, 1, 589846, 524291, 1, 655382, 524291, 1, 720899, 524291, 1, 720900, 524291, 1, 720901, 524291, 1, 720902, 524291, 1, 720903, 524291, 1, 720904, 524291, 1, 720905, 524291, 1, 720906, 524291, 1, 720907, 524291, 1, 720908, 524291, 1, 720909, 524291, 1, 720910, 524291, 1, 720911, 524291, 1, 720912, 524291, 1, 720913, 524291, 1, 720914, 524291, 1, 720915, 524291, 1, 720916, 524291, 1, 720917, 524291, 1, 720918, 524291, 1, 589847, 524291, 1, 655383, 524291, 1, 720919, 524291, 1, 589848, 524291, 1, 655384, 524291, 1, 720920, 524291, 1, 589849, 524291, 1, 655385, 524291, 1, 720921, 524291, 1, 589850, 524291, 1, 655386, 524291, 1, 720922, 524291, 1, 262167, 524291, 1, 327703, 524291, 1, 393239, 524291, 1, 458775, 524291, 1, 524311, 524291, 1)
layer_2/name = "Gate"
layer_2/tile_data = PackedInt32Array(589848, 655363, 6, 655384, 655363, 7, 720920, 655363, 8)

[node name="RoomInstance" parent="." instance=ExtResource("2_b0ayl")]

[node name="Dice" type="Area2D" parent="."]
position = Vector2(448, 248)
script = SubResource("GDScript_2fold")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Dice"]
shape = SubResource("RectangleShape2D_kd5wt")

[node name="SubViewportContainer" type="SubViewportContainer" parent="Dice"]
offset_left = -48.0
offset_top = -48.0
offset_right = 48.0
offset_bottom = 48.0
stretch = true

[node name="SubViewport" type="SubViewport" parent="Dice/SubViewportContainer"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(96, 96)
render_target_update_mode = 4

[node name="Dice" parent="Dice/SubViewportContainer/SubViewport" instance=ExtResource("3_a62rx")]

[node name="DiceAnimator" type="AnimationPlayer" parent="Dice/SubViewportContainer/SubViewport/Dice"]
unique_name_in_owner = true
libraries = {
"": SubResource("AnimationLibrary_txane")
}
autoplay = "Spin"
speed_scale = 0.0

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="Dice/SubViewportContainer/SubViewport"]
transform = Transform3D(0.964095, 0.0309826, -0.263743, 0, 0.993171, 0.116671, 0.265556, -0.112482, 0.957511, 0, 0, 0)

[node name="Camera3D" type="Camera3D" parent="Dice/SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 3.147)

[node name="Label" type="Label" parent="Dice"]
offset_left = -192.0
offset_top = 176.0
offset_right = 192.0
offset_bottom = 202.0
text = "Touch the Dice to randomize rooms"
horizontal_alignment = 1

[node name="Portal" parent="." instance=ExtResource("5_m5jcc")]
modulate = Color(0.207843, 0.870588, 0.121569, 1)
position = Vector2(217, 263)
target_map = "UpperElevatorRoom.tscn"

[connection signal="body_entered" from="Dice" to="Dice" method="_on_body_entered"]
